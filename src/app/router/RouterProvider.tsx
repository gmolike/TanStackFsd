import { Suspense } from 'react';
import type { ComponentType } from 'react';

import { RouterProvider as TanStackRouterProvider, createRouter } from '@tanstack/react-router';
import { useQueryClient } from '@tanstack/react-query';

import { useAuth } from '~/features/auth/model/AuthContext';
import { config } from '~/shared/config/env';

// Import route tree (generated by TanStack Router)
import { routeTree } from '../../routeTree.gen';
import { LoadingSpinner } from '../../shared/shadcn';

// ================= TYPES =================

interface RouterContext {
  auth: ReturnType<typeof useAuth>;
  queryClient: ReturnType<typeof useQueryClient>;
}

interface RouteLoadingFallbackProps {
  route?: string;
}

interface RouteErrorFallbackProps {
  error: Error;
  retry: () => void;
  route?: string;
}

// ================= LOADING FALLBACKS =================

const RouteLoadingFallback = ({ route }: RouteLoadingFallbackProps) => (
  <div className="flex h-64 items-center justify-center">
    <div className="text-center">
      <LoadingSpinner size="md" className="mx-auto mb-2" />
      <p className="text-sm text-muted-foreground">
        {route ? `${route} wird geladen...` : 'Seite wird geladen...'}
      </p>
    </div>
  </div>
);

const GlobalLoadingFallback = () => (
  <div className="flex h-screen items-center justify-center bg-background">
    <div className="text-center">
      <LoadingSpinner size="lg" className="mx-auto mb-4" />
      <h2 className="mb-2 text-lg font-semibold">Anwendung wird geladen</h2>
      <p className="text-muted-foreground">Bitte warten Sie einen Moment...</p>
    </div>
  </div>
);

// ================= ERROR FALLBACKS =================

const RouteErrorFallback = ({ error, retry, route }: RouteErrorFallbackProps) => (
  <div className="flex h-64 items-center justify-center">
    <div className="max-w-md text-center">
      <div className="mb-4 text-destructive">
        <svg className="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.996-.833-2.764 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
          />
        </svg>
      </div>
      <h3 className="mb-2 text-lg font-semibold">Fehler beim Laden</h3>
      <p className="mb-4 text-sm text-muted-foreground">
        {config.isDevelopment
          ? error.message
          : route
            ? `Die Seite "${route}" konnte nicht geladen werden.`
            : 'Ein Fehler ist beim Laden der Seite aufgetreten.'}
      </p>
      <button
        onClick={retry}
        className="rounded bg-primary px-4 py-2 text-sm text-primary-foreground hover:bg-primary/90"
      >
        Erneut versuchen
      </button>
    </div>
  </div>
);

// ================= ROUTE GUARDS =================

interface ProtectedRouteProps {
  children: React.ReactNode;
  requireAuth?: boolean;
  requiredRoles?: string[];
  requiredPermissions?: string[];
  fallback?: ComponentType;
}

const ProtectedRoute = ({
  children,
  requireAuth = true,
  requiredRoles = [],
  requiredPermissions = [],
  fallback: Fallback,
}: ProtectedRouteProps) => {
  const auth = useAuth();

  // Show loading while auth is being checked
  if (auth.isLoading) {
    return <RouteLoadingFallback route="Authentifizierung" />;
  }

  // Check authentication
  if (requireAuth && !auth.isAuthenticated) {
    if (Fallback) {
      return <Fallback />;
    }
    // Redirect to login
    window.location.href = '/login';
    return null;
  }

  // Check roles
  if (requiredRoles.length > 0 && !auth.hasRole(requiredRoles)) {
    if (Fallback) {
      return <Fallback />;
    }
    // Redirect to forbidden page
    window.location.href = '/forbidden';
    return null;
  }

  // Check permissions
  if (requiredPermissions.length > 0 && !auth.hasPermission(requiredPermissions)) {
    if (Fallback) {
      return <Fallback />;
    }
    // Redirect to forbidden page
    window.location.href = '/forbidden';
    return null;
  }

  return <>{children}</>;
};

// ================= ROUTER CONFIGURATION =================

const createAppRouter = () => {
  return createRouter({
    routeTree,
    context: {} as RouterContext,
    defaultPreload: 'intent',
    defaultPreloadStaleTime: 0,
    defaultNotFoundComponent: () => (
      <div className="flex h-64 items-center justify-center">
        <div className="text-center">
          <h2 className="mb-2 text-2xl font-semibold">404 - Seite nicht gefunden</h2>
          <p className="mb-4 text-muted-foreground">
            Die angeforderte Seite konnte nicht gefunden werden.
          </p>
          <button
            onClick={() => window.history.back()}
            className="rounded bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90"
          >
            ZurÃ¼ck
          </button>
        </div>
      </div>
    ),
    defaultErrorComponent: ({ error, retry }) => <RouteErrorFallback error={error} retry={retry} />,
    defaultPendingComponent: () => <RouteLoadingFallback />,
    defaultPendingMs: 1000,
    defaultPendingMinMs: 500,
  });
};

// Create router instance
const router = createAppRouter();

// Augment the router type
declare module '@tanstack/react-router' {
  interface Register {
    router: typeof router;
  }
}

// ================= ROUTER PROVIDER COMPONENT =================

export const RouterProvider = () => {
  const auth = useAuth();
  const queryClient = useQueryClient();

  // Wait for auth to be initialized
  if (auth.isLoading) {
    return <GlobalLoadingFallback />;
  }

  // Update router context
  router.update({
    context: {
      auth,
      queryClient,
    },
  });

  return (
    <Suspense fallback={<GlobalLoadingFallback />}>
      <TanStackRouterProvider
        router={router}
        defaultNotFoundComponent={() => (
          <div className="flex h-screen items-center justify-center">
            <div className="text-center">
              <h1 className="mb-4 text-4xl font-bold text-muted-foreground">404</h1>
              <h2 className="mb-2 text-xl font-semibold">Seite nicht gefunden</h2>
              <p className="mb-6 text-muted-foreground">
                Die angeforderte Seite konnte nicht gefunden werden.
              </p>
              <div className="space-x-4">
                <button
                  onClick={() => window.history.back()}
                  className="rounded bg-secondary px-4 py-2 text-secondary-foreground hover:bg-secondary/80"
                >
                  ZurÃ¼ck
                </button>
                <button
                  onClick={() => (window.location.href = '/')}
                  className="rounded bg-primary px-4 py-2 text-primary-foreground hover:bg-primary/90"
                >
                  Zur Startseite
                </button>
              </div>
            </div>
          </div>
        )}
      />
    </Suspense>
  );
};

// ================= ROUTER UTILITIES =================

/**
 * Hook to get the current router instance
 */
export const useAppRouter = () => router;

/**
 * Hook to navigate programmatically
 */
export const useAppNavigate = () => {
  return router.navigate;
};

/**
 * Hook to get current route information
 */
export const useCurrentRoute = () => {
  return router.state.location;
};

/**
 * Utility to check if route requires authentication
 */
export const routeRequiresAuth = (pathname: string): boolean => {
  const publicRoutes = ['/login', '/register', '/forgot-password', '/reset-password'];
  return !publicRoutes.includes(pathname);
};

/**
 * Utility to get route metadata
 */
export const getRouteMetadata = (pathname: string) => {
  // This would be extended based on your route configuration
  const routeMetadata: Record<string, { title: string; description?: string }> = {
    '/': { title: 'Dashboard', description: 'Ãœbersicht und Statistiken' },
    '/team': { title: 'Team', description: 'Team-Mitglieder verwalten' },
    '/profile': { title: 'Profil', description: 'Ihr persÃ¶nliches Profil' },
    '/settings': { title: 'Einstellungen', description: 'Anwendungseinstellungen' },
  };

  return routeMetadata[pathname] || { title: 'Unbekannte Seite' };
};

// ================= ROUTE TRANSITION EFFECTS =================

if (config.isDevelopment) {
  router.subscribe('onLoad', (match) => {
    console.log('ðŸ§­ Route loaded:', match.pathname);
  });

  router.subscribe('onError', (error) => {
    console.error('ðŸš¨ Route error:', error);
  });
}

// ================= EXPORTS =================

export { ProtectedRoute, RouteLoadingFallback, RouteErrorFallback };
export default RouterProvider;
